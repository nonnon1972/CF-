## **Dockerとは**  
Dockerは、アプリケーションを**コンテナ**という単位で実行・管理するための仮想化技術です。コンテナはアプリケーションとその依存関係（ライブラリや設定など）をまとめた軽量な仮想環境であり、**環境の違いによる動作の差異をなくし、どこでも一貫した動作**を保証します。  

### **Dockerの特徴**  
- **軽量で高速**：仮想マシン（VM）と異なり、ホストOSのカーネルを共有するため起動が速く、リソース消費も少ない。  
- **移植性が高い**：コンテナ化されたアプリケーションは、開発環境・テスト環境・本番環境で同じように動作する。  
- **スケーラビリティが高い**：複数のコンテナを簡単にスケールアップ・スケールダウンできる。  

---

## **仮想環境の種類とそれぞれの特色**  

### **1. 仮想マシン（Virtual Machine, VM）**  
**特徴**  
- **Hypervisor（ハイパーバイザー）**上で動作し、それぞれが独立したOS（ゲストOS）を持つ。  
- 高い分離性を持ち、異なるOSを並行して実行可能（例：Windows上でLinuxを動作させる）。  
- ただし、**リソース消費が大きく、起動が遅い**のがデメリット。  

**代表的なツール**  
- VMware  
- VirtualBox  
- Microsoft Hyper-V  

---

### **2. コンテナ（Container）**  
**特徴**  
- ホストOSのカーネルを共有し、**軽量なプロセスとして動作**する。  
- 必要なアプリケーションと依存関係のみを含むため、**起動が高速でリソースのオーバーヘッドが小さい**。  
- ただし、OSのカーネルを共有するため、**異なるOSを同時に動かすことはできない**（例：Windows上でLinuxコンテナを動かす場合は特殊な設定が必要）。  

**代表的なツール**  
- **Docker**（最も普及しているコンテナ技術）  
- Podman  
- LXC（Linux Containers）  

---

## **Dockerのコンテナ管理コマンド**  

### **1. コンテナの起動**
```sh
docker run -d --name my_container nginx
```
**説明**  
- `docker run`：新しいコンテナを作成して起動する。  
- `-d`：バックグラウンド（デタッチド）モードで実行。  
- `--name my_container`：コンテナに`my_container`という名前を付ける。  
- `nginx`：使用するイメージ（この場合はNginx Webサーバー）。  

---

### **2. コンテナの停止**

docker stop my_container
```
**説明**  
- `docker stop`：実行中のコンテナを停止する。  
- `my_container`：停止するコンテナの名前（またはID）。  

---

### **3. コンテナの削除**
```sh
docker rm my_container
```
**説明**  
- `docker rm`：停止しているコンテナを削除する（※**実行中のコンテナは削除できない**）。  
- `my_container`：削除するコンテナの名前（またはID）。  

**⚠ 注意**  
コンテナを削除すると、そのコンテナ内のデータも消えるため、データを保持したい場合は**ボリュームを使う**のが一般的。  

---

### **補足：すべてのコンテナを一括削除するコマンド**
#### **実行中のコンテナをすべて停止**
```sh
docker stop $(docker ps -q)
```
#### **すべてのコンテナを削除**
```sh
docker rm $(docker ps -aq)
```

---

## **まとめ**
| 仮想環境の種類 | 特徴 |
|--------------|------|
| **仮想マシン（VM）** | 独立したOSを持つが、リソース消費が大きく起動が遅い |
| **コンテナ（Docker）** | ホストOSのカーネルを共有し、軽量で高速に動作する |

**Dockerの基本コマンド**
- **`docker run -d --name my_container nginx`**：コンテナの起動  
- **`docker stop my_container`**：コンテナの停止  
- **`docker rm my_container`**：コンテナの削除  
